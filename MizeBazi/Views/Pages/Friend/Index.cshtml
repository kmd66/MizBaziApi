@{
    ViewData["Title"] = "Pages / friend";
    var request = System.IO.File.ReadAllText("./Views/Pages/Friend/request.html");
    var message = System.IO.File.ReadAllText("./Views/Pages/Friend/message.html");
    var chat = System.IO.File.ReadAllText("./Views/Pages/Friend/chat.html");
    var friend = System.IO.File.ReadAllText("./Views/Pages/Friend/friend.html");
    var block = System.IO.File.ReadAllText("./Views/Pages/Friend/block.html");
}
@section css {
    <link rel="stylesheet" href="~/css/friend.css" cache="inPage" />
}
@section Scripts2 {
    <script src="~/lib/signalr.min.js"></script>
    <script src="~/lib/msgpack.min.js"></script>
    <script src="~/lib/signalr-protocol-msgpack.min.js"></script>
}
@section Scripts {
    <script src="~/js/friend.js" cache="inFile"></script>
}

<div class="fading-image"></div>

<div class="container" id="app" v-cloak>

    <div v-show="appModel.state != 'chat'" style="height: 100vh;">
        <div class="mainTop d-flex">
            <div class="mainTopItem">
                {{appModel.title}}
            </div>
            <div class="mainTopItem" v-on:click="urlBack()">
                <span>بازگشت</span>
                <i class="icon-sidebar-left4"></i>
            </div>
        </div>


        <div class="mainCenter">
            <div v-show="appModel.loding" class="lds-hourglass"></div>
            <div v-show="!appModel.loding">
                <request-component ref="childrequest" :app-model="appModel"></request-component>
                <message-component ref="childmessage" :app-model="appModel"></message-component>
                <friend-component ref="childfriend" :app-model="appModel"></friend-component>
                <block-component ref="childblock" :app-model="appModel"></block-component>
            </div>
        </div>

        <div class="mainBottom" v-show="appModel.startInit" style="display: none;">
            <div class="item" style="border-left: 1px solid var(--TextColor2);"
                 v-on:click="changeState('message')"
                 v-bind:style="{ backgroundColor: appModel.state =='message' ? 'rgb(3 218 198 / 60%)' : 'transparent'}">
                <i class="icon-message-text"></i>
            </div>
            <div class="item" style="border-left: 1px solid var(--TextColor2);"
                 v-on:click="changeState('friend')"
                 v-bind:style="{ backgroundColor: appModel.state =='friend' ? 'rgb(3 218 198 / 60%)' : 'transparent'}">
                <i class="icon-users"></i>
            </div>
            <div class="item" style="border-left: 1px solid var(--TextColor2);"
                 v-on:click="changeState('request')"
                 v-bind:style="{ backgroundColor: appModel.state =='request' ? 'rgb(3 218 198 / 60%)' : 'transparent'}">
                <i class="icon-user-1-tick"></i>
            </div>
            <div class="item"
                 v-on:click="changeState('block')"
                 v-bind:style="{ backgroundColor: appModel.state =='block' ? 'rgb(3 218 198 / 60%)' : 'transparent'}">
                <i class="icon-forbidden-24"></i>
            </div>
        </div>
    </div>

    <div v-show="appModel.state == 'chat'" style="height: 100vh;">
        <chat-component ref="childchat" :app-model="appModel"></chat-component>
    </div>
</div>


<template id="request-template">
    <div v-show="appModel.state == 'request'" style="height: 100%;">
        @Html.Raw(request)
    </div>
</template>
<template id="message-template">
    <div v-show="appModel.state == 'message'" style="height: 100%;">
        @Html.Raw(message)
    </div>
</template>
<template id="friend-template">
    <div v-show="appModel.state == 'friend'" style="height: 100%;">
        @Html.Raw(friend)
    </div>
</template>
<template id="block-template">
    <div v-show="appModel.state == 'block'" style="height: 100%;">
        @Html.Raw(block)
    </div>
</template>

<template id="chat-template">
    @Html.Raw(chat)
</template>